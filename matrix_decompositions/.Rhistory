head(vl)
vn = qnorm(pvec)
plot(vl,pvec)
plot(vl,pvec,type = "l")
set.seed(20);
pvec = sort(runif(500))
vl = qlogis(pvec)
vn = qnorm(pvec)
plot(vl,pvec,type = "l")
lines(vn,pvec,col="red")
rg<- lm(vl~poly(vn,degree = 3))
lines(rg$fitted.values,pvec,lty=3)
lines(rg$fitted.values,pvec,lty=3,col=3)
plot(vl,pvec,type = "l")
lines(vn,pvec,col="red")
rg<- lm(vl~poly(vn,degree = 2))
lines(rg$fitted.values,pvec,lty=3,col=3)
plot(vl,pvec,type = "l")
lines(vn,pvec,col="red")
rg<- lm(vl~poly(vn,degree = 1))
lines(rg$fitted.values,pvec,lty=3,col=3)
plot(vl,pvec,type = "l")
lines(vn,pvec,col="red")
rg<- lm(vl~poly(vn,degree = 1))
lines(rg$fitted.values,pvec,lty=3,col=3)
plot(vl,pvec,type = "l")
lines(vn,pvec,col="red")
rg<- lm(vl~poly(vn,degree = 2))
lines(rg$fitted.values,pvec,lty=3,col=3)
plot(vl,pvec,type = "l")
lines(vn,pvec,col="red")
rg<- lm(vl~poly(vn,degree = 3))
lines(rg$fitted.values,pvec,lty=3,col=3)
plot(vl,pvec,type = "l")
lines(vn,pvec,col="red")
rg<- lm(vl~poly(vn,degree = 4))
lines(rg$fitted.values,pvec,lty=3,col=3)
set.seed(12);
BETA<- c(c(0.5,1.3,0.4,-0.4),runif(kap,-0.1,3)) # parameter at the median
kap<- 4 # number of other covariates X (excluding treatment and time)
set.seed(12);
BETA<- c(c(0.5,1.3,0.4,-0.4),runif(kap,-0.1,3)) # parameter at the median
BETA
set.seed(12);
BETA<- round(c(c(0.5,1.3,0.4,-0.4),runif(kap,-0.1,3)),digits = 1)# parameter at the median
BETA
u=rnorm(1000)
id=u[u<0]
length(id)
id=rep(0,1000)
id[u<0]=1
cov(u,id)
cor(u,id)
cor((u^2),id)
mean(u^2*id)
plot(u^2,id)
rsq<- function(u) u*(0.5-ifelse(u<0,1,0))
rsq=Vectorize(rsq)
plot(u,rsq(u))
rsq<- function(u) (u*(0.5-ifelse(u<0,1,0)))^2
plot(u,rsq(u))
mean(u^2)
?rt
n=1000
kp = rnorm(n,mean = 0.5)
kp = rnorm(n,mean = 0.5)
zp = rt(n,df=3,ncp = -2)
mean(kp*zp)<=(mean(kp)*mean(zp))
jp = rt(n,df=3,ncp = 2)
mean(kp*jp)<=(mean(kp)*mean(jp))
mean(kp*jp)
mean(kp)
mean(jp)
(mean(kp)*mean(jp))
mean(kp*jp)
mean(zp)
mean(kp*zp)
(mean(kp)*mean(zp))
ftt=function(t) sqrt(t*(1-t))
curve(ftt,0,1)
optimise(ftt,c(0,1),maximum = TRUE)
ftt(0.5)
rs<- function(u) u*(0.5-ifelse(u<0,1,0))
rs=Vectorize(rs)
summary(u)
summary(rs(u))
summary((rs(u))^2)
kap=4
4:(4+kap-1)
95-5+1
(95-5)/5
(95-5)/5+1
seq(.05,.95,length.out = 19)
1/2.53
1/2.896
42000/32
set.seed(40);pi1 = rnorm(1000,mean = 0.05)
set.seed(40);pi1 = rnorm(1000,mean = 0.05,sd=1/100)
summary(pi1)
ut1 = function(a) 2*mean((0.8*10*(1+a*pi1))^0.5)
ut1=Vectorize(ut1)
curve(ut1,0,1)
ut2 = function(a) -(1/2)*mean((0.8*10*(1+a*pi1))^-2)
ut2=Vectorize(ut2)
curve(ut2,0,1)
all((pi1^2)==(abs(pi1)^2))
z=function(x)-exp(x)
curve(z,0,1)
zk=function(r) r*(r-1)
curve(zk,0,10)
curve(zk,-10,1)
curve(zk,-10,4)
curve(zk,-10,10)
optimise(zk,c(-5,5))
abline(h=0)
curve(zk,-1,1)
curve(zk,-10,1)
optimise(zk,c(-2,1))
rk=function(r) (1/r)*((1/r)-1)
curve(rk,c(-2,1))
curve(rk,c(-2,-0.0001))
curve(rk,c(-2,-0.01))
ck=function(x) x^.5 + (1-x)^.5
curve(ck,0,1)
cj=function(x) x^2 + (1-x)^2
curve(cj,0,1)
cj=function(x) (x^2 + (1-x)^2)^.5
curve(cj,0,1)
cj=function(x) (x^-2 + (1-x)^-2)
curve(cj,0,1)
cj=function(x) (x^-2 + (1-x)^-2)^-.5
curve(cj,0,1)
rk
curve(rk,-2,1)
curve(cj,0,1)
ck=function(x) (x^.5 + (1-x)^.5)^2
curve(ck,0,1)
curve(cj,0,1)
fx = function(y) 1-(y^2/4)
curve(fx,0,2)
curve(fx,-2,2)
curve(fx,-8,8)
curve(fx,-3,3)
ff<- function(t) 1/t
curve(ff,2,1000)
Q=function(p) exp(2*log(p))
P=function(p) exp(2*log(Q))
curve(P,1,4)
P=function(Q) exp(2*log(Q))
curve(P,1,4)
P=function(Q) exp(-2*log(Q))
curve(P,1,4)
fg<- function(x) (x*exp(-x))/(1+exp(-x))^2
fg(0)
integrate(fg,-Inf,Inf)
curve(fg,-10,10)
uniroot(function(x) 49/x - x, -1,10)
uniroot(function(x) 49/x - x, c(-1,10))
fn= function(q) (49/q) - q
curve(fn,-1,10)
abline(h=0)
uniroot(function(x) 49/x - x, 0,10)
uniroot(function(x) 49/x - x, c(0,10))
Y= rnor
expand.grid(height = seq(60, 80, 5), weight = seq(100, 300, 50),
sex = c("Male","Female"))
combin(1000,2)
View(combin)
combin(100,10)
f = function(x) combin(100,x)
f=Vectorize(f)
fv=f(1:10)
plot(1:10,fv)
plot(1:100,fv,type = "l")
xx=1:100
fv=f(xx)
plot(xx,fv,type = "l")
max(fv)
min(fv)
f(20)
765.63/6
library(bayesdistreg)
?bayesdistreg
839+3379
186.42+163.00
install.packages("pryr")
pryr::show_c_source(.Internal(mean(x)))
View(lm)
View(lm.fit)
install.packages("gls")
install.packages("gsl")
?gsl
library(gsl)
View(gsl::bessel_I0)
?.C
devtools::install_github('cjgeyer/mat')
devtools::install_github("cjgeyer/mat")
install.packages("baz")
factorial(6)
View(solve)
set.seed(12); X = round(rnorm(10),2)
X
set.seed(14); Y = cbind(1,X)%*%c(1.0,-1.0) + round(rnorm(10,sd=0.1))
Y
lm(Y~X)
paste(cbind(1,X),collapse = "+")
paste(cbind(1,X),collapse = ",")
paste(Y,collapse = ",")
18+31+21.57
(18+31+21.57)/3
ceiling((18+31+21.57)/3)
0.75*15
n <- 9
k <- 3
l <- 3
n <- 9
k <- 3
l <- 3
X <- matrix(1:n, k)
Y <- matrix(1:n, l)
set.seed(2); aX = matrix(runif(n), k)
aX
aX = matrix(runif(n), k); aY = matrix(rnorm(n), k)
XtX <- t(X) %*% X
XtX
(XtX <- t(X) %*% X)
(aXtX<- t(aX) %*% aX)
round(aXtX<- t(aX) %*% aX,2)
XX <-matrix(0:0,ncol(X),ncol(X))
for(i in 1:ncol(X)){
for(j in 1:i){
for (k in 1:nrow(X)){
XX[i,j]<-XX[i,j]+X[k,i]*X[k,j]
}
if(i!=j){
XX[j,i]=XX[i,j]}
}
}
XX
all.equal(XX,XtX)
fx = function(X){for(i in 1:ncol(X)){
XX <-matrix(0:0,ncol(X),ncol(X))
for(j in 1:i){
for (k in 1:nrow(X)){
XX[i,j]<-XX[i,j]+X[k,i]*X[k,j]
}
if(i!=j){
XX[j,i]=XX[i,j]}
}
}
return(XX)
}
all.equal(fx(X),XtX)
X <- matrix(1:n, k)
fx = function(X){
XX <-matrix(0:0,ncol(X),ncol(X))
for(i in 1:ncol(X)){
for(j in 1:i){
for (k in 1:nrow(X)){
XX[i,j]<-XX[i,j]+X[k,i]*X[k,j]
}
if(i!=j){
XX[j,i]=XX[i,j]}
}
}
return(XX)
}
all.equal(fx(X),XtX)
all.equal(fx(aX),aXtX)
fx2 <- function(X,Y){
XY <-matrix(0:0,ncol(X),ncol(Y))
for(i in 1:ncol(X)){
for(j in 1:nrow(X)){
for (k in 1:nrow(Y)){
XY[i,j]<-XY[i,j]+X[k,i]*Y[k,j]
}
}
}
return(XY)
}
all.equal(fx2(X,Y),XtY)
XtY <- t(X) %*% Y
XtY
fx2 <- function(X,Y){
XY <-matrix(0:0,ncol(X),ncol(Y))
for(i in 1:ncol(X)){
for(j in 1:nrow(X)){
for (k in 1:nrow(Y)){
XY[i,j]<-XY[i,j]+X[k,i]*Y[k,j]
}
}
}
return(XY)
}
all.equal(fx2(X,Y),XtY)
(aXtY <- t(aX) %*% aY)
fx2 <- function(X,Y){
XY <-matrix(0:0,ncol(X),ncol(Y))
for(i in 1:ncol(X)){
for(j in 1:nrow(X)){
for (k in 1:nrow(Y)){
XY[i,j]<-XY[i,j]+X[k,i]*Y[k,j]
}
}
}
return(XY)
}
all.equal(fx2(X,Y),XtY)
all.equal(fx(aX, aY),aXtY)
all.equal(fx2(aX, aY),aXtY)
(XYt <- X %*% t(Y))
(aXYt <- aX %*% t(aY))
fx3 <- function(X,Y){
XY2 <-matrix(0:0,ncol(X),ncol(Y))
for(i in 1:ncol(X)){
for(j in 1:nrow(X)){
for (k in 1:nrow(Y)){
XY2[i,j]<-XY2[i,j]+X[i,k]*Y[j,k]
}
}
}
return(XY2)
}
all.equal(fx3(X,Y),XYt)
all.equal(fx3(aX, aY),aXYt)
n <- 9
k <- 3
l <- 3
X <- matrix(1:n, k)
Y <- matrix(1:n, l)
set.seed(2);
aX = matrix(runif(n), k); aY = matrix(rnorm(n), k)
(XtX <- t(X) %*% X)
round(aXtX<- t(aX) %*% aX,2)
fxtx = function(X){
XX <-matrix(0:0,ncol(X),ncol(X))
for(i in 1:ncol(X)){
for(j in 1:i){
for (k in 1:nrow(X)){
XX[i,j]<-XX[i,j]+X[k,i]*X[k,j]
}
if(i!=j){
XX[j,i]=XX[i,j]}
}
}
return(XX)
}
all.equal(fxtx(X),XtX)
all.equal(fxtx(aX),aXtX)
fxyt <- function(X,Y){
XY2 <-matrix(0:0,ncol(X),ncol(Y))
for(i in 1:ncol(X)){
for(j in 1:nrow(X)){
for (k in 1:nrow(Y)){
XY2[i,j]<-XY2[i,j]+X[i,k]*Y[j,k]
}
}
}
return(XY2)
}
all.equal(fxyt(X,Y),XYt)
all.equal(fxyt(aX, aY),aXYt)
(XYt <- X %*% t(Y))
(aXYt <- aX %*% t(aY))
all.equal(fxyt(X,Y),XYt)
all.equal(fxyt(aX, aY),aXYt)
9/5
sort(sample(1:29,5))
rootSolve::uniroot.all(function(x) x-cos(x),c(-pi,pi))
curve(function(x)x-cos(x),-pi,pi)
curve(function(x){x-cos(x)},-pi,pi)
dlogis(0.5)
plogis(0.5)
dnorm(0.5)
pnorm(0.5)
dlogis(1.96)
plogis(1.96)
plogis(0)
dnorm(0)
sort(sample(1:72,5))
#==================================================================#
# File to compare performance of linear regressors:
# load packages
library(RdotC)
library(RcppEigen)
#==================================================================#
N = 10000; k = 499
set.seed(15)
# generate matrix X
X = cbind(1,matrix(rnorm(N*k),ncol = k))
# generate Y
koef<- runif((k+1),-2,2)
Y = X%*%matrix(koef,ncol = 1) + rnorm(N,sd=0.05)
system.time((rcCg<- linreg.cg(Y=Y,X=X)))
system.time((rcGs<- linreg.gs(Y=Y,X=X)))
system.time((rcSor<- linreg.sor(Y=Y,X=X)))
system.time((lmLreg<- lm(Y~X[,-1])))
system.time((lmLfit<- lm.fit(X,Y)))
system.time((flm<- fastLmPure(X[,-1],Y)))
# user  system elapsed
# 1.155   0.006   1.166
system.time((lmqr<-linreg.qr(Y,X)))
# user  system elapsed
# 1.155   0.006   1.166
system.time((lmqr<-linreg.qr(Y,X)))
# user  system elapsed
# 1.155   0.006   1.166
system.time((lmqr<-linreg.qr(Y,X)))
lookup::lookup(RcppEigen::fastLmPure)
BIC
lookup::lookup(BIC)
xa = matrix(c(-1.48,-0.93,-1.02,-0.21,1.65,0.73),nrow = 2)
xb = matrix(c(-0.23,0.58,2.42,0.02,0.34,0.16),ncol = 2)
xa%*%xb
xa[,-2]%*%xb[-2,]
1500 - 100 - 14.05
1500 - 100 - 14.05 - 238.21
1500 - 100 - 14.05 - 238.21-322.57
1000/4.9897
1000/5.0089
round(1000/5.0089,2)
528.61-200
sort(sample(1:56,5))
sort(sample(1:60,5))
sample(1:72,2)
sample(1:72,2)
sample(1:57,3)
sample(1:56,2)
sample(1:60,2)
?norm
MGS<- function(R,n)
{
for (k in 1:n) {
R[k,k] = sqrt(A[,k]^2)
Q[,k] = A[,k]/R[k,k]
for (j in (k+1):n) {
R[k,j] = t(Q[,k])%*%A[,j]
A[,j] = A[,j] - Q[,k]*R[k,j]
}
}
}
# Set working directory to source file
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
list.files()
# Test:
dat<- read.table("data.txt",header = F)
dat
X = dat[,-11]; Y = dat[,11]
MGS<- function(A,R,n)
{
for (k in 1:n) {
R[k,k] = sqrt(A[,k]^2)
Q[,k] = A[,k]/R[k,k]
for (j in (k+1):n) {
R[k,j] = t(Q[,k])%*%A[,j]
A[,j] = A[,j] - Q[,k]*R[k,j]
}
}
}
MGS<- function(A,m,n)
{ Q = matrix(NA,m,n)
R = matrix(0,n,n)
for (k in 1:n) {
R[k,k] = sqrt(A[,k]^2)
Q[,k] = A[,k]/R[k,k]
for (j in (k+1):n) {
R[k,j] = t(Q[,k])%*%A[,j]
A[,j] = A[,j] - Q[,k]*R[k,j]
}
}
list(Q=Q,R=R)
}
MGS(X,nrow(X),ncol(X))
MGS<- function(A,m,n)
{ Q = matrix(NA,m,n)
R = matrix(0,n,n)
for (k in 1:n) {
R[k,k] = sqrt(sum(A[,k]^2))
Q[,k] = A[,k]/R[k,k]
for (j in (k+1):n) {
R[k,j] = t(Q[,k])%*%A[,j]
A[,j] = A[,j] - Q[,k]*R[k,j]
}
}
list(Q=Q,R=R)
}
MGS(X,nrow(X),ncol(X))
dim(X)
ncol(X)
nrow(X)
MGS<- function(A,m,n)
{ Q = matrix(NA,m,n)
R = matrix(0,n,n)
for (k in 1:n) {
R[k,k] = sqrt(sum(A[,k]^2))
Q[,k] = A[,k]/R[k,k]
if(k<n)
{for (j in (k+1):n) {
R[k,j] = t(Q[,k])%*%A[,j]
A[,j] = A[,j] - Q[,k]*R[k,j]
}
}
}
list(Q=Q,R=R)
}
MGS(X,nrow(X),ncol(X))
(msObj<-MGS(X,nrow(X),ncol(X)))
dim(msObj$Q)
t(msObj$Q)%*%msObj$Q
round(t(msObj$Q)%*%msObj$Q,3)
msObj
